version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: procure_postgres
    environment:
      POSTGRES_DB: procuredb
      POSTGRES_USER: procure_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - procure_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U procure_user -d procuredb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache - Enhanced for High Performance
  redis:
    image: redis:7-alpine
    container_name: procure_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - procure_network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000 --tcp-keepalive 60 --timeout 300
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Backend Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: procure_backend
    environment:
      SPRING_PROFILES_ACTIVE: production
      DB_USERNAME: procure_user
      DB_PASSWORD: ${DB_PASSWORD:-secure_password}
      DB_HOST: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      JWT_SECRET: ${JWT_SECRET:-mySecretKey123456789012345678901234567890}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-secure_admin_password}
      MAIL_HOST: ${MAIL_HOST:-smtp.gmail.com}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USERNAME: ${MAIL_USERNAME:-}
      MAIL_PASSWORD: ${MAIL_PASSWORD:-}
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    ports:
      - "8080:8080"
    volumes:
      - file_uploads:/var/app/uploads
      - app_logs:/var/log/app
    networks:
      - procure_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: procure_frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
      - ssl_certs:/etc/nginx/ssl:ro
    networks:
      - procure_network
    depends_on:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Nginx Load Balancer (for multiple backend instances)
  nginx:
    image: nginx:alpine
    container_name: procure_nginx
    ports:
      - "8081:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - procure_network
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  file_uploads:
    driver: local
  app_logs:
    driver: local
  ssl_certs:
    driver: local

networks:
  procure_network:
    driver: bridge
